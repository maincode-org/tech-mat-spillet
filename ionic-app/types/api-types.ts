/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/endscreens': {
    get: {
      parameters: {
        query: {
          /** Maximum number of results possible */
          _limit?: number;
          /** Sort according to a specific field. */
          _sort?: string;
          /** Skip a specific number of entries (especially useful for pagination) */
          _start?: number;
          /** Get entries that matches exactly your input */
          '='?: string;
          /** Get records that are not equals to something */
          _ne?: string;
          /** Get record that are lower than a value */
          _lt?: string;
          /** Get records that are lower than or equal to a value */
          _lte?: string;
          /** Get records that are greater than a value */
          _gt?: string;
          /** Get records that are greater than  or equal a value */
          _gte?: string;
          /** Get records that contains a value */
          _contains?: string;
          /** Get records that contains (case sensitive) a value */
          _containss?: string;
          /** Get records that matches any value in the array of values */
          _in?: string[];
          /** Get records that doesn't match any value in the array of values */
          _nin?: string[];
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Endscreen'][];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Create a new record */
    post: {
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Endscreen'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewEndscreen'];
        };
      };
    };
  };
  '/endscreens/count': {
    get: {
      parameters: {};
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              count?: number;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/endscreens/{id}': {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Endscreen'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Update a record */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Endscreen'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewEndscreen'];
        };
      };
    };
    /** Delete a record */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** deletes a single record based on the ID supplied */
        200: {
          content: {
            'application/json': number;
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/episodes': {
    get: {
      parameters: {
        query: {
          /** Maximum number of results possible */
          _limit?: number;
          /** Sort according to a specific field. */
          _sort?: string;
          /** Skip a specific number of entries (especially useful for pagination) */
          _start?: number;
          /** Get entries that matches exactly your input */
          '='?: string;
          /** Get records that are not equals to something */
          _ne?: string;
          /** Get record that are lower than a value */
          _lt?: string;
          /** Get records that are lower than or equal to a value */
          _lte?: string;
          /** Get records that are greater than a value */
          _gt?: string;
          /** Get records that are greater than  or equal a value */
          _gte?: string;
          /** Get records that contains a value */
          _contains?: string;
          /** Get records that contains (case sensitive) a value */
          _containss?: string;
          /** Get records that matches any value in the array of values */
          _in?: string[];
          /** Get records that doesn't match any value in the array of values */
          _nin?: string[];
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Episode'][];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Create a new record */
    post: {
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Episode'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewEpisode'];
        };
      };
    };
  };
  '/episodes/count': {
    get: {
      parameters: {};
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              count?: number;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/episodes/{id}': {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Episode'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Update a record */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Episode'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewEpisode'];
        };
      };
    };
    /** Delete a record */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** deletes a single record based on the ID supplied */
        200: {
          content: {
            'application/json': number;
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/funfacts': {
    get: {
      parameters: {
        query: {
          /** Maximum number of results possible */
          _limit?: number;
          /** Sort according to a specific field. */
          _sort?: string;
          /** Skip a specific number of entries (especially useful for pagination) */
          _start?: number;
          /** Get entries that matches exactly your input */
          '='?: string;
          /** Get records that are not equals to something */
          _ne?: string;
          /** Get record that are lower than a value */
          _lt?: string;
          /** Get records that are lower than or equal to a value */
          _lte?: string;
          /** Get records that are greater than a value */
          _gt?: string;
          /** Get records that are greater than  or equal a value */
          _gte?: string;
          /** Get records that contains a value */
          _contains?: string;
          /** Get records that contains (case sensitive) a value */
          _containss?: string;
          /** Get records that matches any value in the array of values */
          _in?: string[];
          /** Get records that doesn't match any value in the array of values */
          _nin?: string[];
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Funfact'][];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Create a new record */
    post: {
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Funfact'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewFunfact'];
        };
      };
    };
  };
  '/funfacts/count': {
    get: {
      parameters: {};
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              count?: number;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/funfacts/{id}': {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Funfact'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Update a record */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Funfact'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewFunfact'];
        };
      };
    };
    /** Delete a record */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** deletes a single record based on the ID supplied */
        200: {
          content: {
            'application/json': number;
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/questions': {
    get: {
      parameters: {
        query: {
          /** Maximum number of results possible */
          _limit?: number;
          /** Sort according to a specific field. */
          _sort?: string;
          /** Skip a specific number of entries (especially useful for pagination) */
          _start?: number;
          /** Get entries that matches exactly your input */
          '='?: string;
          /** Get records that are not equals to something */
          _ne?: string;
          /** Get record that are lower than a value */
          _lt?: string;
          /** Get records that are lower than or equal to a value */
          _lte?: string;
          /** Get records that are greater than a value */
          _gt?: string;
          /** Get records that are greater than  or equal a value */
          _gte?: string;
          /** Get records that contains a value */
          _contains?: string;
          /** Get records that contains (case sensitive) a value */
          _containss?: string;
          /** Get records that matches any value in the array of values */
          _in?: string[];
          /** Get records that doesn't match any value in the array of values */
          _nin?: string[];
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Question'][];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Create a new record */
    post: {
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Question'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewQuestion'];
        };
      };
    };
  };
  '/questions/count': {
    get: {
      parameters: {};
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              count?: number;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/questions/{id}': {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Question'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Update a record */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Question'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewQuestion'];
        };
      };
    };
    /** Delete a record */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** deletes a single record based on the ID supplied */
        200: {
          content: {
            'application/json': number;
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/rounds': {
    get: {
      parameters: {
        query: {
          /** Maximum number of results possible */
          _limit?: number;
          /** Sort according to a specific field. */
          _sort?: string;
          /** Skip a specific number of entries (especially useful for pagination) */
          _start?: number;
          /** Get entries that matches exactly your input */
          '='?: string;
          /** Get records that are not equals to something */
          _ne?: string;
          /** Get record that are lower than a value */
          _lt?: string;
          /** Get records that are lower than or equal to a value */
          _lte?: string;
          /** Get records that are greater than a value */
          _gt?: string;
          /** Get records that are greater than  or equal a value */
          _gte?: string;
          /** Get records that contains a value */
          _contains?: string;
          /** Get records that contains (case sensitive) a value */
          _containss?: string;
          /** Get records that matches any value in the array of values */
          _in?: string[];
          /** Get records that doesn't match any value in the array of values */
          _nin?: string[];
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Round'][];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Create a new record */
    post: {
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Round'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewRound'];
        };
      };
    };
  };
  '/rounds/count': {
    get: {
      parameters: {};
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              count?: number;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/rounds/{id}': {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Round'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Update a record */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['Round'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewRound'];
        };
      };
    };
    /** Delete a record */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** deletes a single record based on the ID supplied */
        200: {
          content: {
            'application/json': number;
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/swagger.json': {
    get: {
      parameters: {};
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/tv-shows': {
    get: {
      parameters: {
        query: {
          /** Maximum number of results possible */
          _limit?: number;
          /** Sort according to a specific field. */
          _sort?: string;
          /** Skip a specific number of entries (especially useful for pagination) */
          _start?: number;
          /** Get entries that matches exactly your input */
          '='?: string;
          /** Get records that are not equals to something */
          _ne?: string;
          /** Get record that are lower than a value */
          _lt?: string;
          /** Get records that are lower than or equal to a value */
          _lte?: string;
          /** Get records that are greater than a value */
          _gt?: string;
          /** Get records that are greater than  or equal a value */
          _gte?: string;
          /** Get records that contains a value */
          _contains?: string;
          /** Get records that contains (case sensitive) a value */
          _containss?: string;
          /** Get records that matches any value in the array of values */
          _in?: string[];
          /** Get records that doesn't match any value in the array of values */
          _nin?: string[];
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Create a new record */
    post: {
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewTv-show'];
        };
      };
    };
  };
  '/tv-shows/count': {
    get: {
      parameters: {};
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/tv-shows/{id}': {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Update a record */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewTv-show'];
        };
      };
    };
    /** Delete a record */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** deletes a single record based on the ID supplied */
        200: {
          content: {
            'application/json': number;
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/email/': {
    /** Send an email */
    post: {
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': {
            foo?: string;
          };
        };
      };
    };
  };
  '/email/test': {
    /** Send an test email */
    post: {
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': {
            foo?: string;
          };
        };
      };
    };
  };
  '/email/settings': {
    /** Get the email settings */
    get: {
      parameters: {};
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/upload/': {
    /** Upload a file */
    post: {
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': {
            foo?: string;
          };
        };
      };
    };
  };
  '/upload/files/count': {
    /** Retrieve the total number of uploaded files */
    get: {
      parameters: {};
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/upload/files': {
    /** Retrieve all file documents */
    get: {
      parameters: {};
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/upload/files/{id}': {
    /** Retrieve a single file depending on its id */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Delete an uploaded file */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/upload/search/{id}': {
    /** Search for an uploaded file */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/users-permissions/roles/{id}': {
    /** Retrieve a role depending on its id */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['UsersPermissionsRole'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/users-permissions/roles': {
    /** Retrieve all role documents */
    get: {
      parameters: {
        query: {
          /** Maximum number of results possible */
          _limit?: number;
          /** Sort according to a specific field. */
          _sort?: string;
          /** Skip a specific number of entries (especially useful for pagination) */
          _start?: number;
          /** Get entries that matches exactly your input */
          '='?: string;
          /** Get records that are not equals to something */
          _ne?: string;
          /** Get record that are lower than a value */
          _lt?: string;
          /** Get records that are lower than or equal to a value */
          _lte?: string;
          /** Get records that are greater than a value */
          _gt?: string;
          /** Get records that are greater than  or equal a value */
          _gte?: string;
          /** Get records that contains a value */
          _contains?: string;
          /** Get records that contains (case sensitive) a value */
          _containss?: string;
          /** Get records that matches any value in the array of values */
          _in?: string[];
          /** Get records that doesn't match any value in the array of values */
          _nin?: string[];
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['UsersPermissionsRole'][];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Create a new role */
    post: {
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['UsersPermissionsRole'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewUsersPermissionsRole'];
        };
      };
    };
  };
  '/users-permissions/roles/{role}': {
    /** Update a role */
    put: {
      parameters: {
        path: {
          role: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['UsersPermissionsRole'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewUsersPermissionsRole'];
        };
      };
    };
    /** Delete a role */
    delete: {
      parameters: {
        path: {
          role: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/users-permissions/search/{id}': {
    /** Search for users */
    get: {
      parameters: {
        path: {
          id: string;
        };
        query: {
          /** Maximum number of results possible */
          _limit?: number;
          /** Sort according to a specific field. */
          _sort?: string;
          /** Skip a specific number of entries (especially useful for pagination) */
          _start?: number;
          /** Get entries that matches exactly your input */
          '='?: string;
          /** Get records that are not equals to something */
          _ne?: string;
          /** Get record that are lower than a value */
          _lt?: string;
          /** Get records that are lower than or equal to a value */
          _lte?: string;
          /** Get records that are greater than a value */
          _gt?: string;
          /** Get records that are greater than  or equal a value */
          _gte?: string;
          /** Get records that contains a value */
          _contains?: string;
          /** Get records that contains (case sensitive) a value */
          _containss?: string;
          /** Get records that matches any value in the array of values */
          _in?: string[];
          /** Get records that doesn't match any value in the array of values */
          _nin?: string[];
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['UsersPermissionsUser'][];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/connect/*': {
    /** Connect a provider */
    get: {
      parameters: {};
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/auth/local': {
    /** Login a user using the identifiers email and password */
    post: {
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': {
            foo?: string;
          };
        };
      };
    };
  };
  '/auth/local/register': {
    /** Register a new user with the default role */
    post: {
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['UsersPermissionsUser'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewUsersPermissionsUser'];
        };
      };
    };
  };
  '/auth/{provider}/callback': {
    /** Successfull redirection after approving a provider */
    get: {
      parameters: {
        path: {
          provider: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/auth/forgot-password': {
    /** Send the reset password email link */
    post: {
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': {
            foo?: string;
          };
        };
      };
    };
  };
  '/auth/reset-password': {
    /** Reset user password with a code (resetToken) */
    post: {
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': {
            foo?: string;
          };
        };
      };
    };
  };
  '/auth/email-confirmation': {
    /** Validate a user account */
    get: {
      parameters: {};
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/auth/send-email-confirmation': {
    /** Send a confirmation email to user */
    post: {
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': {
            foo?: string;
          };
        };
      };
    };
  };
  '/users': {
    /** Retrieve all user documents */
    get: {
      parameters: {
        query: {
          /** Maximum number of results possible */
          _limit?: number;
          /** Sort according to a specific field. */
          _sort?: string;
          /** Skip a specific number of entries (especially useful for pagination) */
          _start?: number;
          /** Get entries that matches exactly your input */
          '='?: string;
          /** Get records that are not equals to something */
          _ne?: string;
          /** Get record that are lower than a value */
          _lt?: string;
          /** Get records that are lower than or equal to a value */
          _lte?: string;
          /** Get records that are greater than a value */
          _gt?: string;
          /** Get records that are greater than  or equal a value */
          _gte?: string;
          /** Get records that contains a value */
          _contains?: string;
          /** Get records that contains (case sensitive) a value */
          _containss?: string;
          /** Get records that matches any value in the array of values */
          _in?: string[];
          /** Get records that doesn't match any value in the array of values */
          _nin?: string[];
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['UsersPermissionsUser'][];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/users/me': {
    /** Retrieve the logged in user information */
    get: {
      parameters: {};
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['UsersPermissionsUser'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/users/{id}': {
    /** Retrieve a single user depending on his id */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['UsersPermissionsUser'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Update an existing user */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': components['schemas']['UsersPermissionsUser'];
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['NewUsersPermissionsUser'];
        };
      };
    };
    /** Delete an existing user */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** response */
        200: {
          content: {
            'application/json': {
              foo?: string;
            };
          };
        };
        /** Forbidden */
        403: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** Not found */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** unexpected error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    Endscreen: {
      id: string;
      title: string;
      background: {
        id: string;
        name: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: { [key: string]: unknown };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string;
        provider: string;
        provider_metadata?: { [key: string]: unknown };
        related?: string;
        created_by?: string;
        updated_by?: string;
      };
      icon: {
        id: string;
        name: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: { [key: string]: unknown };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string;
        provider: string;
        provider_metadata?: { [key: string]: unknown };
        related?: string;
        created_by?: string;
        updated_by?: string;
      };
      text: string;
      buttonText: string;
      episodes?: {
        id: string;
        progressionBackground?: string;
        thumbnail: string;
        isUnlocked: boolean;
        description?: string;
        buttonText: string;
        title: string;
        indexInTVShow: number;
        tv_show?: string;
        rounds?: string[];
        endscreen?: string;
        published_at?: string;
        created_by?: string;
        updated_by?: string;
      }[];
      published_at?: string;
    };
    NewEndscreen: {
      title: string;
      text: string;
      buttonText: string;
      episodes?: string[];
      published_at?: string;
      created_by?: string;
      updated_by?: string;
    };
    Episode: {
      id: string;
      progressionBackground?: {
        id: string;
        name: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: { [key: string]: unknown };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string;
        provider: string;
        provider_metadata?: { [key: string]: unknown };
        related?: string;
        created_by?: string;
        updated_by?: string;
      };
      thumbnail: {
        id: string;
        name: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: { [key: string]: unknown };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string;
        provider: string;
        provider_metadata?: { [key: string]: unknown };
        related?: string;
        created_by?: string;
        updated_by?: string;
      };
      isUnlocked: boolean;
      description?: string;
      buttonText: string;
      title: string;
      indexInTVShow: number;
      tv_show?: {
        id: string;
        showLogo: string;
        customerLogo: string;
        background?: string;
        name: string;
        splash?: string;
        episodes?: string[];
        secondaryBackground: string;
        localizations?: string[];
        locale?: string;
        published_at?: string;
        created_by?: string;
        updated_by?: string;
      };
      rounds?: {
        id: string;
        title: string;
        subtitle: string;
        icon: string;
        episode?: string;
        indexInEpisode: number;
        questions?: string[];
        funfacts?: string[];
        published_at?: string;
        created_by?: string;
        updated_by?: string;
      }[];
      endscreen?: {
        id: string;
        title: string;
        background: string;
        icon: string;
        text: string;
        buttonText: string;
        episodes?: string[];
        published_at?: string;
        created_by?: string;
        updated_by?: string;
      };
      published_at?: string;
    };
    NewEpisode: {
      isUnlocked: boolean;
      description?: string;
      buttonText: string;
      title: string;
      indexInTVShow: number;
      tv_show?: string;
      rounds?: string[];
      endscreen?: string;
      published_at?: string;
      created_by?: string;
      updated_by?: string;
    };
    Funfact: {
      id: string;
      icon?: {
        id: string;
        name: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: { [key: string]: unknown };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string;
        provider: string;
        provider_metadata?: { [key: string]: unknown };
        related?: string;
        created_by?: string;
        updated_by?: string;
      };
      title: string;
      text: string;
      round?: {
        id: string;
        title: string;
        subtitle: string;
        icon: string;
        episode?: string;
        indexInEpisode: number;
        questions?: string[];
        funfacts?: string[];
        published_at?: string;
        created_by?: string;
        updated_by?: string;
      };
      published_at?: string;
    };
    NewFunfact: {
      title: string;
      text: string;
      round?: string;
      published_at?: string;
      created_by?: string;
      updated_by?: string;
    };
    Question: {
      id: string;
      icon?: {
        id: string;
        name: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: { [key: string]: unknown };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string;
        provider: string;
        provider_metadata?: { [key: string]: unknown };
        related?: string;
        created_by?: string;
        updated_by?: string;
      };
      title: string;
      text: string;
      answerOptions: {
        id: string;
        text?: string;
        image?: {
          id: string;
          name: string;
          alternativeText?: string;
          caption?: string;
          width?: number;
          height?: number;
          formats?: { [key: string]: unknown };
          hash: string;
          ext?: string;
          mime: string;
          size: number;
          url: string;
          previewUrl?: string;
          provider: string;
          provider_metadata?: { [key: string]: unknown };
          related?: string;
          created_by?: string;
          updated_by?: string;
        };
        indexInQuestion: number;
      }[];
      shouldRevealCorrectAnswer: boolean;
      cover?: {
        id: string;
        name: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: { [key: string]: unknown };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string;
        provider: string;
        provider_metadata?: { [key: string]: unknown };
        related?: string;
        created_by?: string;
        updated_by?: string;
      };
      correctAnswerNumber: number;
      round?: {
        id: string;
        title: string;
        subtitle: string;
        icon: string;
        episode?: string;
        indexInEpisode: number;
        questions?: string[];
        funfacts?: string[];
        published_at?: string;
        created_by?: string;
        updated_by?: string;
      };
      indexInRound: number;
      published_at?: string;
    };
    NewQuestion: {
      title: string;
      text: string;
      answerOptions: {
        id: string;
        text?: string;
        image?: {
          id: string;
          name: string;
          alternativeText?: string;
          caption?: string;
          width?: number;
          height?: number;
          formats?: { [key: string]: unknown };
          hash: string;
          ext?: string;
          mime: string;
          size: number;
          url: string;
          previewUrl?: string;
          provider: string;
          provider_metadata?: { [key: string]: unknown };
          related?: string;
          created_by?: string;
          updated_by?: string;
        };
        indexInQuestion: number;
      }[];
      shouldRevealCorrectAnswer: boolean;
      correctAnswerNumber: number;
      round?: string;
      indexInRound: number;
      published_at?: string;
      created_by?: string;
      updated_by?: string;
    };
    Round: {
      id: string;
      title: string;
      subtitle: string;
      icon: {
        id: string;
        name: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: { [key: string]: unknown };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string;
        provider: string;
        provider_metadata?: { [key: string]: unknown };
        related?: string;
        created_by?: string;
        updated_by?: string;
      };
      episode?: {
        id: string;
        progressionBackground?: string;
        thumbnail: string;
        isUnlocked: boolean;
        description?: string;
        buttonText: string;
        title: string;
        indexInTVShow: number;
        tv_show?: string;
        rounds?: string[];
        endscreen?: string;
        published_at?: string;
        created_by?: string;
        updated_by?: string;
      };
      indexInEpisode: number;
      questions?: {
        id: string;
        icon?: string;
        title: string;
        text: string;
        answerOptions: { [key: string]: unknown };
        shouldRevealCorrectAnswer: boolean;
        cover?: string;
        correctAnswerNumber: number;
        round?: string;
        indexInRound: number;
        published_at?: string;
        created_by?: string;
        updated_by?: string;
      }[];
      funfacts?: {
        id: string;
        icon?: string;
        title: string;
        text: string;
        round?: string;
        published_at?: string;
        created_by?: string;
        updated_by?: string;
      }[];
      published_at?: string;
    };
    NewRound: {
      title: string;
      subtitle: string;
      episode?: string;
      indexInEpisode: number;
      questions?: string[];
      funfacts?: string[];
      published_at?: string;
      created_by?: string;
      updated_by?: string;
    };
    'Tv-show': {
      id: string;
      showLogo: {
        id: string;
        name: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: { [key: string]: unknown };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string;
        provider: string;
        provider_metadata?: { [key: string]: unknown };
        related?: string;
        created_by?: string;
        updated_by?: string;
      };
      customerLogo: {
        id: string;
        name: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: { [key: string]: unknown };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string;
        provider: string;
        provider_metadata?: { [key: string]: unknown };
        related?: string;
        created_by?: string;
        updated_by?: string;
      };
      background?: {
        id: string;
        name: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: { [key: string]: unknown };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string;
        provider: string;
        provider_metadata?: { [key: string]: unknown };
        related?: string;
        created_by?: string;
        updated_by?: string;
      };
      name: string;
      splash?: {
        id: string;
        name: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: { [key: string]: unknown };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string;
        provider: string;
        provider_metadata?: { [key: string]: unknown };
        related?: string;
        created_by?: string;
        updated_by?: string;
      };
      episodes?: {
        id: string;
        progressionBackground?: string;
        thumbnail: string;
        isUnlocked: boolean;
        description?: string;
        buttonText: string;
        title: string;
        indexInTVShow: number;
        tv_show?: string;
        rounds?: string[];
        endscreen?: string;
        published_at?: string;
        created_by?: string;
        updated_by?: string;
      }[];
      secondaryBackground: {
        id: string;
        name: string;
        alternativeText?: string;
        caption?: string;
        width?: number;
        height?: number;
        formats?: { [key: string]: unknown };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string;
        provider: string;
        provider_metadata?: { [key: string]: unknown };
        related?: string;
        created_by?: string;
        updated_by?: string;
      };
      localizations?: {
        id: string;
        showLogo: string;
        customerLogo: string;
        background?: string;
        name: string;
        splash?: string;
        episodes?: string[];
        secondaryBackground: string;
        localizations?: string[];
        locale?: string;
        published_at?: string;
        created_by?: string;
        updated_by?: string;
      }[];
      locale?: string;
      published_at?: string;
    };
    'NewTv-show': {
      name: string;
      episodes?: string[];
      localizations?: string[];
      locale?: string;
      published_at?: string;
      created_by?: string;
      updated_by?: string;
    };
    UsersPermissionsRole: {
      id: string;
      name: string;
      description?: string;
      type?: string;
      permissions?: {
        id: string;
        type: string;
        controller: string;
        action: string;
        enabled: boolean;
        policy?: string;
        role?: string;
        created_by?: string;
        updated_by?: string;
      }[];
      users?: {
        id: string;
        username: string;
        email: string;
        provider?: string;
        password?: string;
        resetPasswordToken?: string;
        confirmationToken?: string;
        confirmed?: boolean;
        blocked?: boolean;
        role?: string;
        created_by?: string;
        updated_by?: string;
      }[];
    };
    NewUsersPermissionsRole: {
      name: string;
      description?: string;
      type?: string;
      permissions?: string[];
      users?: string[];
      created_by?: string;
      updated_by?: string;
    };
    UsersPermissionsUser: {
      id: string;
      username: string;
      email: string;
      provider?: string;
      confirmed?: boolean;
      blocked?: boolean;
      role?: {
        id: string;
        name: string;
        description?: string;
        type?: string;
        permissions?: string[];
        users?: string[];
        created_by?: string;
        updated_by?: string;
      };
    };
    NewUsersPermissionsUser: {
      username: string;
      email: string;
      provider?: string;
      password?: string;
      resetPasswordToken?: string;
      confirmationToken?: string;
      confirmed?: boolean;
      blocked?: boolean;
      role?: string;
      created_by?: string;
      updated_by?: string;
    };
    Error: {
      code: number;
      message: string;
    };
  };
}

export interface operations {}

export interface external {}
